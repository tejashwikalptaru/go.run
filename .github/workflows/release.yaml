name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    if: "!contains(github.event.head_commit.message, 'Bump version')"
    name: Release and Build Binaries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Get current version
        id: get_version
        run: |
          if [ -f VERSION ]; then
            version=$(cat VERSION)
          else
            version="0.0.0"
          fi
          echo "Current version: $version"
          echo "::set-output name=current_version::$version"

      - name: Increment version
        id: increment_version
        run: |
          current_version=${{ steps.get_version.outputs.current_version }}
          new_version=$(echo $current_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "New version: $new_version"
          echo $new_version > VERSION
          echo "::set-output name=new_version::$new_version"

      - name: Commit and push new version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add VERSION
          git commit -m "Bump version to ${{ steps.increment_version.outputs.new_version }}"
          git push origin main

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_version.outputs.new_version }}
          release_name: Release ${{ steps.increment_version.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Build for macOS
        run: |
          make build-darwin
        env:
          GOARCH: amd64
          GOOS: darwin

      - name: Build for Linux
        run: |
          make build-linux
        env:
          GOARCH: amd64
          GOOS: linux

      - name: Build for Windows
        run: |
          make build-windows
        env:
          GOARCH: amd64
          GOOS: windows

      - name: Zip macOS build
        run: zip -r go.run-darwin-${{ steps.increment_version.outputs.new_version }}.zip .build/go.run
        shell: bash

      - name: Zip Linux build
        run: zip -r go.run-linux-${{ steps.increment_version.outputs.new_version }}.zip .build/go.run
        shell: bash

      - name: Zip Windows build
        run: zip -r go.run-windows-${{ steps.increment_version.outputs.new_version }}.zip .build/go.run.exe
        shell: bash

      - name: Upload macOS binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go.run-darwin-${{ steps.increment_version.outputs.new_version }}.zip
          asset_name: go.run-darwin-${{ steps.increment_version.outputs.new_version }}.zip
          asset_content_type: application/zip

      - name: Upload Linux binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go.run-linux-${{ steps.increment_version.outputs.new_version }}.zip
          asset_name: go.run-linux-${{ steps.increment_version.outputs.new_version }}.zip
          asset_content_type: application/zip

      - name: Upload Windows binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go.run-windows-${{ steps.increment_version.outputs.new_version }}.zip
          asset_name: go.run-windows-${{ steps.increment_version.outputs.new_version }}.zip
          asset_content_type: application/zip
