name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      # Install dependencies for macOS
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install glfw3 pkg-config
        env:
          PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
          CGO_ENABLED: 1
          CGO_CFLAGS: -mmacosx-version-min=10.12

      # Install dependencies for Linux
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev

      # Setup virtual display for headless build on Linux
      - name: Setup Virtual Display (Linux)
        if: runner.os == 'Linux'
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        env:
          DISPLAY: ":99"

      - name: Install dependencies
        run: make dep

      - name: Build for OS
        run: |
          GOARCH=${{ matrix.goarch }} GOOS=${{ matrix.goos }} go build -o .build/go.run${{ matrix.ext }} cmd/main.go

      - name: Zip the build
        run: |
          zip -r go.run-${{ matrix.goos }}-${{ steps.increment_version.outputs.new_version }}.zip .build/go.run${{ matrix.ext }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: go.run-${{ matrix.goos }}-${{ steps.increment_version.outputs.new_version }}.zip
          path: go.run-${{ matrix.goos }}-${{ steps.increment_version.outputs.new_version }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Get current version
        id: get_version
        run: |
          if [ -f VERSION ]; then
            version=$(cat VERSION)
          else
            version="0.0.0"
          fi
          echo "Current version: $version"
          echo "::set-output name=current_version::$version"

      - name: Increment version and add alpha suffix
        id: increment_version
        run: |
          current_version=${{ steps.get_version.outputs.current_version }}
          # Increment the patch version
          new_version=$(echo $current_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          # Append the alpha suffix
          new_version="${new_version}-alpha"
          echo "New version: $new_version"
          echo $new_version > VERSION
          echo "::set-output name=new_version::$new_version"

      - name: Commit and push new version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add VERSION
          git commit -m "Bump version to ${{ steps.increment_version.outputs.new_version }}"
          git push origin main

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_version.outputs.new_version }}
          release_name: Release ${{ steps.increment_version.outputs.new_version }}
          draft: false
          prerelease: true  # Mark as pre-release (alpha/beta)

      - name: Download macOS build
        uses: actions/download-artifact@v3
        with:
          name: go.run-darwin-${{ steps.increment_version.outputs.new_version }}.zip

      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: go.run-linux-${{ steps.increment_version.outputs.new_version }}.zip

      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: go.run-windows-${{ steps.increment_version.outputs.new_version }}.zip

      - name: Upload macOS binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go.run-darwin-${{ steps.increment_version.outputs.new_version }}.zip
          asset_name: go.run-darwin-${{ steps.increment_version.outputs.new_version }}.zip
          asset_content_type: application/zip

      - name: Upload Linux binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go.run-linux-${{ steps.increment_version.outputs.new_version }}.zip
          asset_name: go.run-linux-${{ steps.increment_version.outputs.new_version }}.zip
          asset_content_type: application/zip

      - name: Upload Windows binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go.run-windows-${{ steps.increment_version.outputs.new_version }}.zip
          asset_name: go.run-windows-${{ steps.increment_version.outputs.new_version }}.zip
          asset_content_type: application/zip
